BFS : 
from collections import deque

# Define the goal state and initial state
goal_state = (1, 2, 3, 8, 0, 4, 7, 6, 5)
initial_state = (2, 8, 3, 1, 6, 4, 7, 0, 5)

# Define the possible moves
moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]

def print_board(board_state):
    for i in range(0, 9, 3):
        print(board_state[i:i+3])

def get_next_states(current_state):
    next_states = []
    zero_index = current_state.index(0)
    zero_row, zero_col = zero_index // 3, zero_index % 3

    for move in moves:
        new_row, new_col = zero_row + move[0], zero_col + move[1]
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = list(current_state)
            new_index = new_row * 3 + new_col
            new_state[zero_index], new_state[new_index] = new_state[new_index], new_state[zero_index]
            next_states.append(tuple(new_state))
    
    return next_states
def bfs(initial_state, goal_state):
    visited = set()
    queue = deque([(initial_state, [])])
    while queue:
        current_state, path = queue.popleft()
        visited.add(current_state)

        if current_state == goal_state:
            print("Goal state found!")
            print_board(current_state)
            print("Path to goal state:", path)
            return
        for next_state in get_next_states(current_state):
            if next_state not in visited:
                queue.append((next_state, path + [next_state]))
    print("Goal state not reachable.")
bfs(initial_state, goal_state)

OUTPUT :

Goal state found!
(1, 2, 3)
(8, 0, 4)
(7, 6, 5)
Path to goal state: [(2, 8, 3, 1, 0, 4, 7, 6, 5), (2, 0, 3, 1, 8, 4, 7, 6, 5), (0, 2, 3, 1, 8, 4, 7, 6, 5), (1, 2, 3, 0, 8, 4, 7, 6, 5), (1, 2, 3, 8, 0, 4, 7, 6, 5)]
